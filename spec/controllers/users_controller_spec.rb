require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let (:new_user_attributes) do
    {
        name: "Jorge",
        email: "floresjmjr@gmail.com",
        password: "helloworld",
        password_confirmation: "helloworld"
    }
  end

  describe "GET new" do
    it "returns http success" do
      get :new
      expect(response).to have_http_status(:success)
    end

    it "instantiates a new user" do
      get :new
      expect(:user).to_not be_nil
    end
  end

  describe "POST create" do
     it "returns an http redirect" do
       post :create, user: new_user_attributes
       expect(response).to have_http_status(:redirect)
     end

     it "creates a new user" do
       expect{
         post :create, user: new_user_attributes
       }.to change(User, :count).by(1)
     end

     it "sets user name properly" do
       post :create, user: new_user_attributes
       expect(assigns(:user).name).to eq new_user_attributes[:name]
     end

     it "sets user email properly" do
       post :create, user: new_user_attributes
       expect(assigns(:user).email).to eq new_user_attributes[:email]
     end

     it "sets user password properly" do
       post :create, user: new_user_attributes
       expect(assigns(:user).password).to eq new_user_attributes[:password]
     end

     it "sets user password_confirmation properly" do
       post :create, user: new_user_attributes
       expect(assigns(:user).password_confirmation).to eq new_user_attributes[:password_confirmation]
     end

     it "logs the user in after sign up" do
       post :create, user: new_user_attributes
       expect(session[:user_id]).to eq assigns(:user).id
     end

   end

end
